@using IR_Admin.Db
@using IR_Admin.Helpers
@model IR_Admin.Helpers.MultiModels
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<link href="/Content/admin-press/assets/plugins/wizard/steps.css" rel="stylesheet">
<!--alerts CSS -->
<link href="/Content/admin-press/assets/plugins/sweetalert/sweetalert.css" rel="stylesheet" type="text/css">
<link href="/Content/admin-press/assets/plugins/bootstrap-datepicker/bootstrap-datepicker.min.css" rel="stylesheet" type="text/css" />
<link href="/Content/admin-press/assets/plugins/select2/dist/css/select2.min.css" rel="stylesheet" type="text/css" />
<link href="/Content/admin-press/assets/plugins/switchery/dist/switchery.min.css" rel="stylesheet" />
<link href="/Content/admin-press/assets/plugins/bootstrap-select/bootstrap-select.min.css" rel="stylesheet" />
<link href="/Content/admin-press/assets/plugins/bootstrap-tagsinput/dist/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="/Content/admin-press/assets/plugins/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.css" rel="stylesheet" />
<link href="/Content/admin-press/assets/plugins/multiselect/css/multi-select.css" rel="stylesheet" type="text/css" />

<link href="/Content/admin-press/assets/plugins/sweetalert/sweetalert.css" rel="stylesheet" type="text/css">
<script src="/Content/admin-press/assets/plugins/sweetalert/sweetalert.min.js"></script>
<script src="/Content/admin-press/assets/plugins/sweetalert/jquery.sweet-alert.custom.js"></script>
<div class="page-wrapper">
    <div class="container-fluid">
    @if (ViewBag.Message != null)
    {
        <script type="text/javascript">
            swal("Good job!", "Project Created Successfully", "success")
        </script>
    }
        <div class="row" id="validation">
            <div class="col-12">
                <div class="card wizard-content">
                    <div class="card-body">
                        <h4 class="card-title">Add Project</h4>
                        @using (Html.BeginForm("Create", "BeneficiariesRecords", FormMethod.Post, new { @class = "validation-wizard wizard-circle" }))
                        {
                            @Html.AntiForgeryToken()
                            <!-- Step 1 -->
                            <h6>Project Information</h6>
                            <section>
                                @*<div class="row">
                                    <div class="col-md-6">
                                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.UserName, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.UserName, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.UserName, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Roll, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.Roll, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Roll, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>*@
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Name, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.Name, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.SeasonalProjectType, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.SeasonalProjectType, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.SeasonalProjectType, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    @*<div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.EmailAddress, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.EmailAddress, new { htmlAttributes = new { @class = "form-control required", id = "emailAddress1" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.EmailAddress, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.IRWProjectPinCode, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.IRWProjectPinCode, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.IRWProjectPinCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Country, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.Countries.SelectedCountry, new SelectList(Model.Countries.Countries), "Select a country", new { @class = "form-control required" })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Country, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.ScopeOfProject, htmlAttributes: new { @class = "control-label" })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.ScopeOfProject, "", new { @class = "text-danger" })

                                            <select name="@Html.NameFor(model => model.CountryBasicProjectDataModel.ScopeOfProject)" class="form-control required">
                                                <option value="" selected="selected">-- Select --</option>
                                                <option value="Sessional">Sessional</option>
                                                <option value="Long Term">Long Term</option>
                                                <option value="Short Term">Short Term</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.TypeOfProject, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.TypeOfProject, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.TypeOfProject, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                               
                            </section>
                            <!-- Step 2 -->

                            <!-- Step 2 -->
                            <h6>Project Information</h6>
                            <section>
                                @*<div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.IsOneDonar, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.IsOneDonar, new { htmlAttributes = new { @class = "form-control required", @min = "0" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.IsOneDonar, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    
                                </div>*@
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.DirectRightHolders, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.DirectRightHolders, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.DirectRightHolders, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Duration, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.Duration, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Duration, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Region, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.Region, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Region, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.PrimarySector, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.PrimarySector, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.PrimarySector, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodFrom, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodFrom, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodFrom, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodTo, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodTo, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.ImplementationPeriodTo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            </section>

                            <h6>Additional Information</h6>
                            <section>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.SDGGoalIndicator, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.SDGGoalIndicator, new { htmlAttributes = new { @class = "form-control required", rows = "6", placeholder = "Enter Indicator saparated by . (Ex: 1.IndicatorDescription)" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.SDGGoalIndicator, "", new { @class = "text-danger" })
                                        </div>
                                        
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryBasicProjectDataModel.Donar_Partner, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CountryBasicProjectDataModel.Donar_Partner, new { htmlAttributes = new { @class = "form-control required", rows = "6", placeholder = "Enter Categories saparated by comma (Ex: Donar1, Donar2)" } })
                                            @Html.ValidationMessageFor(model => model.CountryBasicProjectDataModel.Donar_Partner, "", new { @class = "text-danger" })

                                        </div>
                                       
                                    </div>
                                </div>
                            </section>
                            <h6>Flexible Fields</h6>
                            <section>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CategoryModel.Name, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.CategoryModel.Name, new { htmlAttributes = new { @class = "form-control required", rows = "6", placeholder = "Enter Categories saparated by comma (Ex: Cat1, Cat2)" } })
                                            @Html.ValidationMessageFor(model => model.CategoryModel.Name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.FlexibleInterventionModel.Fields, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.FlexibleInterventionModel.Fields, new { htmlAttributes = new { @class = "form-control required", rows = "6", placeholder = "Enter field saparated by comma (Ex: Field1, Field2)" } })
                                            @Html.ValidationMessageFor(model => model.FlexibleInterventionModel.Fields, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </section>
                            <!-- Step 3 -->
                            <h6>Assign to User</h6>
                            <section>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="wint1">Assign User :</label>
                                            <select  name="AssignUser" required id="AssignUser" class="select2 m-b-10 select2-multiple select2-hidden-accessible" style="width: 100%" multiple="" data-placeholder="Choose" tabindex="-1" aria-hidden="true">
                                                @foreach (var user in Model.Users)
                                                    {
                                                        if (!user.UserName.Equals("Admin"))
                                                        {
                                                            <optgroup label="@ProjectHelper.FindProvinceNameById(user.ProvinceId)">
                                                                <option value="@user.Id">@user.UserName</option>
                                                            </optgroup>
                                                        }
                                                    }
                                            </select>
                                            
                                        </div>

                                    </div>
                                </div>

                            </section>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section viewLibraries{

    <!-- <script src="../assets/plugins/moment/min/moment.min.js"></script> -->
    <script src="/Content/admin-press/assets/plugins/wizard/jquery.steps.min.js"></script>
    <script src="/Content/admin-press/assets/plugins/wizard/jquery.validate.min.js"></script>
    <!-- Sweet-Alert  -->
    <script src="/Content/admin-press/assets/plugins/sweetalert/sweetalert.min.js"></script>
    <script src="/Content/admin-press/assets/plugins/wizard/steps.js"></script>
    <script src="/Content/admin-press/assets/plugins/styleswitcher/jQuery.style.switcher.js"></script>
    <script src="/Content/admin-press/assets/plugins/switchery/dist/switchery.min.js"></script>
    <script src="/Content/admin-press/assets/plugins/select2/dist/js/select2.full.min.js" type="text/javascript"></script>
    <script src="/Content/admin-press/assets/plugins/bootstrap-select/bootstrap-select.min.js" type="text/javascript"></script>
    <script src="/Content/admin-press/assets/plugins/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"></script>
    <script src="/Content/admin-press/assets/plugins/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.js" type="text/javascript"></script>
    <script src="/Content/admin-press/assets/plugins/dff/dff.js" type="text/javascript"></script>
    <script type="text/javascript" src="/Content/admin-press/assets/plugins/multiselect/js/jquery.multi-select.js"></script>
    <script type="text/javascript">
        jQuery(document).ready(function () {
            // Switchery
            var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
            $('.js-switch').each(function () {
                new Switchery($(this)[0], $(this).data());
            });
            // For select 2
            $(".select2").select2();
            $('.selectpicker').selectpicker();
            //Bootstrap-TouchSpin
            $(".vertical-spin").TouchSpin({
                verticalbuttons: true,
                verticalupclass: 'ti-plus',
                verticaldownclass: 'ti-minus'
            });
            var vspinTrue = $(".vertical-spin").TouchSpin({
                verticalbuttons: true
            });
            if (vspinTrue) {
                $('.vertical-spin').prev('.bootstrap-touchspin-prefix').remove();
            }
            $("input[name='tch1']").TouchSpin({
                min: 0,
                max: 100,
                step: 0.1,
                decimals: 2,
                boostat: 5,
                maxboostedstep: 10,
                postfix: '%'
            });
            $("input[name='tch2']").TouchSpin({
                min: -1000000000,
                max: 1000000000,
                stepinterval: 50,
                maxboostedstep: 10000000,
                prefix: '$'
            });
            $("input[name='tch3']").TouchSpin();
            $("input[name='tch3_22']").TouchSpin({
                initval: 40
            });
            $("input[name='tch5']").TouchSpin({
                prefix: "pre",
                postfix: "post"
            });
            // For multiselect
            $('#pre-selected-options').multiSelect();
            $('#optgroup').multiSelect({
                selectableOptgroup: true
            });
            $('#public-methods').multiSelect();
            $('#select-all').click(function () {
                $('#public-methods').multiSelect('select_all');
                return false;
            });
            $('#deselect-all').click(function () {
                $('#public-methods').multiSelect('deselect_all');
                return false;
            });
            $('#refresh').on('click', function () {
                $('#public-methods').multiSelect('refresh');
                return false;
            });
            $('#add-option').on('click', function () {
                $('#public-methods').multiSelect('addOption', {
                    value: 42,
                    text: 'test 42',
                    index: 0
                });
                return false;
            });
            $(".ajax").select2({
                ajax: {
                    url: "https://api.github.com/search/repositories",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params) {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 30) < data.total_count
                            }
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) {
                    return markup;
                }, // let our custom formatter work
                minimumInputLength: 1,
                //templateResult: formatRepo, // omitted for brevity, see the source of this page
                //templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
            });
        });

    </script>
}
